module.exports.tajHtmlCompiler =
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./build/parser.js":
/*!*************************!*\
  !*** ./build/parser.js ***!
  \*************************/
/***/ ((module) => {

/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */



function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { HtmlTag: peg$parseHtmlTag },
      peg$startRuleFunction  = peg$parseHtmlTag,

      peg$c0 = function(openTag, child) {
        return {
         view:openTag,
         child: child.filter(item=> {
            return item!=null && typeof item==='string'?item.trim().length!==0:true
         })
        }
      },
      peg$c1 = "/",
      peg$c2 = peg$literalExpectation("/", false),
      peg$c3 = function(openTag) {
        return {
          view:openTag
        }
      },
      peg$c4 = function(word, option) {
        const result = {
           tag:word,
           events:[],
           attr:[],
           dir:{}
        }
        option.forEach(val=>{
          const key = Object.keys(val)[0];
          switch(key){
            case 'event':
              result.events.push(val[key]);break;
            case 'attr':
              result.attr.push(val[key]);break;
             case 'dir':
               const dirValue = val[key];
               result.dir[dirValue.name]=dirValue.value;
               break;
            default:
              result[key] = val[key]   
          }
        });
        if(Object.keys(result.dir).length===0){
           delete result.dir;
        }
       return result;
      },
      peg$c5 = function(value) {
        const key = Object.keys(value)[0];
        return {
           [key]:value[key]
        }
      },
      peg$c6 = peg$otherExpectation("close tag"),
      peg$c7 = function(word) {
        return word
      },
      peg$c8 = peg$otherExpectation("Whitespace"),
      peg$c9 = /^[ \t]/,
      peg$c10 = peg$classExpectation([" ", "\t"], false, false),
      peg$c11 = peg$otherExpectation("One or more whitespaces"),
      peg$c12 = function(space) {return null;},
      peg$c13 = peg$otherExpectation("directive"),
      peg$c14 = "#",
      peg$c15 = peg$literalExpectation("#", false),
      peg$c16 = function(name, value) {
         return {dir:{
            name,
            value: value || []
         }};
      },
      peg$c17 = "(",
      peg$c18 = peg$literalExpectation("(", false),
      peg$c19 = ")",
      peg$c20 = peg$literalExpectation(")", false),
      peg$c21 = function(expFirst, expRest) {
         expRest.unshift(expFirst);
         return expRest
      },
      peg$c22 = ",",
      peg$c23 = peg$literalExpectation(",", false),
      peg$c24 = function(exp) {
        return exp;
      },
      peg$c25 = "#if(",
      peg$c26 = peg$literalExpectation("#if(", false),
      peg$c27 = function(exp) {
         return {ifExp: {ifCond:exp}};
      },
      peg$c28 = "#else-if(",
      peg$c29 = peg$literalExpectation("#else-if(", false),
      peg$c30 = function(exp) {
         return {ifExp: {elseIfCond:exp}};
      },
      peg$c31 = "#else",
      peg$c32 = peg$literalExpectation("#else", false),
      peg$c33 = function() {
         return {ifExp: {else:true}}
      },
      peg$c34 = "#for(",
      peg$c35 = peg$literalExpectation("#for(", false),
      peg$c36 = "in",
      peg$c37 = peg$literalExpectation("in", false),
      peg$c38 = function(key, index, value) {
         return {forExp:{
            key, value,index : index || 'i'
         }}
      },
      peg$c39 = ":",
      peg$c40 = peg$literalExpectation(":", false),
      peg$c41 = "=",
      peg$c42 = peg$literalExpectation("=", false),
      peg$c43 = function(isBind, attr, word) {
         return {attr: {key:attr,value:word, isBind:isBind!=null}};
      },
      peg$c44 = function(index) {
      	return index ;
      },
      peg$c45 = "#html",
      peg$c46 = peg$literalExpectation("#html", false),
      peg$c47 = function(val) {
         return {html: val};
      },
      peg$c48 = peg$otherExpectation("<"),
      peg$c49 = /^[<]/,
      peg$c50 = peg$classExpectation(["<"], false, false),
      peg$c51 = peg$otherExpectation("</"),
      peg$c52 = /^[\/]/,
      peg$c53 = peg$classExpectation(["/"], false, false),
      peg$c54 = peg$otherExpectation(">"),
      peg$c55 = /^[>]/,
      peg$c56 = peg$classExpectation([">"], false, false),
      peg$c57 = peg$otherExpectation("identifier"),
      peg$c58 = /^[a-zA-Z$]/,
      peg$c59 = peg$classExpectation([["a", "z"], ["A", "Z"], "$"], false, false),
      peg$c60 = function(val) {
      	return val.join("");
      },
      peg$c61 = peg$otherExpectation("mustache expression"),
      peg$c62 = "{{",
      peg$c63 = peg$literalExpectation("{{", false),
      peg$c64 = "}}",
      peg$c65 = peg$literalExpectation("}}", false),
      peg$c66 = function(val, filters) {
      	return {mustacheExp:val , filters};
      },
      peg$c67 = peg$otherExpectation("filter"),
      peg$c68 = "|",
      peg$c69 = peg$literalExpectation("|", false),
      peg$c70 = function(val) {
        return val;
      },
      peg$c71 = peg$otherExpectation("event syntax"),
      peg$c72 = "on:",
      peg$c73 = peg$literalExpectation("on:", false),
      peg$c74 = function(event, modifier, handlers) {
      	 let isNative=false;
           const option = {};
           const modifierFiltered = [];
           modifier.forEach(item=>{
             if(["capture","once","passive"].includes(item)){
               option[item]=true
             }
             else if(item==="native"){
               isNative=true
             }
             else {
               modifierFiltered.push(item)
             }
           });
          return {event: {name:event, handlers,option, isNative,modifiers:modifierFiltered }};
      },
      peg$c75 = function(ev) {
        return Array.isArray(ev)? ev: [ev]
      },
      peg$c76 = "{",
      peg$c77 = peg$literalExpectation("{", false),
      peg$c78 = "}",
      peg$c79 = peg$literalExpectation("}", false),
      peg$c80 = function(ev1, evRest) {
         evRest.unshift(ev1);
         return evRest;
      },
      peg$c81 = function(ev) {
        return ev;
      },
      peg$c82 = function(handler) {
        return handler
      },
      peg$c83 = peg$otherExpectation("event modifier"),
      peg$c84 = ".",
      peg$c85 = peg$literalExpectation(".", false),
      peg$c86 = function(value) {
        return value;
      },
      peg$c87 = function(exp, expRest) {
         expRest.forEach(item=>{
           exp = exp.concat(item)
         });
         const lastIndex = exp.length -1;
         exp[0].exp.left = '{' + exp[0].exp.left;
         const lastRight = exp[lastIndex].exp.right;
         exp[lastIndex].exp.right =   (lastRight==null?'':lastRight) + '}';
         //console.log("exp",exp);
         return exp;
      },
      peg$c88 = function(exp) {
        exp[0].exp.left= "," + exp[0].exp.left;
        return exp;
      },
      peg$c89 = function(exp, op) {
       return {exp,op}
      },
      peg$c90 = function(left, op, right) {
        return {
         left,op,right
        }
      },
      peg$c91 = /^[&|:]/,
      peg$c92 = peg$classExpectation(["&", "|", ":"], false, false),
      peg$c93 = function(val) {
        return val.join("");
      },
      peg$c94 = /^[>=<!]/,
      peg$c95 = peg$classExpectation([">", "=", "<", "!"], false, false),
      peg$c96 = peg$otherExpectation("expression"),
      peg$c97 = /^[a-zA-Z0-9.$\-'"]/,
      peg$c98 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], ".", "$", "-", "'", "\""], false, false),
      peg$c99 = peg$otherExpectation("Event Assignment"),
      peg$c100 = /^[a-zA-Z0-9&=>{}() |[\]]/,
      peg$c101 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "&", "=", ">", "{", "}", "(", ")", " ", "|", "[", "]"], false, false),
      peg$c102 = peg$otherExpectation("html"),
      peg$c103 = /^[a-zA-Z0-9& .$\n\r"']/,
      peg$c104 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "&", " ", ".", "$", "\n", "\r", "\"", "'"], false, false),
      peg$c105 = function(val) {
      	return val.join("").replace(/[\n\r]/gm, "").replace(/\s\s+/g, ' ');
      },
      peg$c106 = peg$otherExpectation("string"),
      peg$c107 = /^['\/"]/,
      peg$c108 = peg$classExpectation(["'", "/", "\""], false, false),
      peg$c109 = peg$otherExpectation("word"),
      peg$c110 = /^[a-zA-Z0-9& |.$!=\-:;]/,
      peg$c111 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "&", " ", "|", ".", "$", "!", "=", "-", ":", ";"], false, false),

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseHtmlTag() {
    var s0;

    s0 = peg$parseHtmlTagClosing();
    if (s0 === peg$FAILED) {
      s0 = peg$parseHtmlTagSelfClosing();
    }

    return s0;
  }

  function peg$parseHtmlTagClosing() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseHtmlOpen();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEndTag();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseHtmlTag();
        if (s4 === peg$FAILED) {
          s4 = peg$parseHtml();
          if (s4 === peg$FAILED) {
            s4 = peg$parseMustacheExpression();
          }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseHtmlTag();
          if (s4 === peg$FAILED) {
            s4 = peg$parseHtml();
            if (s4 === peg$FAILED) {
              s4 = peg$parseMustacheExpression();
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseCloseTag();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c0(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHtmlTagSelfClosing() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseHtmlOpen();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 47) {
        s2 = peg$c1;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c2); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseEndTag();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c3(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHtmlOpen() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseStartOpenTag();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseIdentifier();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseHtmlOpenOption();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseHtmlOpenOption();
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c4(s2, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHtmlOpenOption() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseIf();
    if (s1 === peg$FAILED) {
      s1 = peg$parseElseIf();
      if (s1 === peg$FAILED) {
        s1 = peg$parseElse();
      }
    }
    if (s1 === peg$FAILED) {
      s1 = peg$parseFor();
      if (s1 === peg$FAILED) {
        s1 = peg$parseEvent();
        if (s1 === peg$FAILED) {
          s1 = peg$parseAttribute();
          if (s1 === peg$FAILED) {
            s1 = peg$parseInnerHtml();
            if (s1 === peg$FAILED) {
              s1 = peg$parseDirective();
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c5(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCloseTag() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseStartCloseTag();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseIdentifier();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseEndTag();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c7(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c6); }
    }

    return s0;
  }

  function peg$parseWs() {
    var s0, s1;

    peg$silentFails++;
    if (peg$c9.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c8); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseWs();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseWs();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c12(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c11); }
    }

    return s0;
  }

  function peg$parseDirective() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c14;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c15); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWord();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseDirectiveValue();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c16(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c13); }
    }

    return s0;
  }

  function peg$parseDirectiveValue() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c17;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c18); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseExpression();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseDirectiveRestValue();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseDirectiveRestValue();
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c19;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c20); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c21(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDirectiveRestValue() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 44) {
      s1 = peg$c22;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c23); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseExpression();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c24(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIf() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c25) {
      s1 = peg$c25;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c26); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseExpression();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s3 = peg$c19;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c20); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c27(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseElseIf() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c28) {
      s1 = peg$c28;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c29); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseExpression();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s3 = peg$c19;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c20); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c30(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseElse() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c31) {
      s1 = peg$c31;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c32); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c33();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFor() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c34) {
      s1 = peg$c34;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c35); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseIdentifier();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseForIndex();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parse_();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parse_();
              }
              if (s6 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c36) {
                  s7 = peg$c36;
                  peg$currPos += 2;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c37); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parse_();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parse_();
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseExpression();
                    if (s9 !== peg$FAILED) {
                      s10 = [];
                      s11 = peg$parse_();
                      while (s11 !== peg$FAILED) {
                        s10.push(s11);
                        s11 = peg$parse_();
                      }
                      if (s10 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s11 = peg$c19;
                          peg$currPos++;
                        } else {
                          s11 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c20); }
                        }
                        if (s11 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c38(s3, s5, s9);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAttribute() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 58) {
      s1 = peg$c39;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c40); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseIdentifier();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s4 = peg$c41;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c42); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseStringSymbol();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseWord();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseStringSymbol();
                if (s7 !== peg$FAILED) {
                  s8 = [];
                  s9 = peg$parse_();
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parse_();
                  }
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c43(s1, s2, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseForIndex() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 44) {
      s1 = peg$c22;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c23); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseIdentifier();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c44(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInnerHtml() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c45) {
      s1 = peg$c45;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c46); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s3 = peg$c41;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c42); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseStringSymbol();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseIdentifier();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseStringSymbol();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c47(s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStartOpenTag() {
    var s0, s1;

    peg$silentFails++;
    if (peg$c49.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c50); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c48); }
    }

    return s0;
  }

  function peg$parseStartCloseTag() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c49.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c50); }
    }
    if (s1 !== peg$FAILED) {
      if (peg$c52.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c53); }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c51); }
    }

    return s0;
  }

  function peg$parseEndTag() {
    var s0, s1;

    peg$silentFails++;
    if (peg$c55.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c56); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c54); }
    }

    return s0;
  }

  function peg$parseIdentifier() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (peg$c58.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c59); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c58.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c59); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c60(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c57); }
    }

    return s0;
  }

  function peg$parseMustacheExpression() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c62) {
      s1 = peg$c62;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c63); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseHtml();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseFilter();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseFilter();
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            if (input.substr(peg$currPos, 2) === peg$c64) {
              s6 = peg$c64;
              peg$currPos += 2;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c65); }
            }
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                if (input.substr(peg$currPos, 2) === peg$c64) {
                  s6 = peg$c64;
                  peg$currPos += 2;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c65); }
                }
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c66(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c61); }
    }

    return s0;
  }

  function peg$parseFilter() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 124) {
        s2 = peg$c68;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c69); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseIdentifier();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c70(s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c67); }
    }

    return s0;
  }

  function peg$parseEvent() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c72) {
      s1 = peg$c72;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c73); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseIdentifier();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseEventModifier();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseEventModifier();
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s4 = peg$c41;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c42); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseEventHandlers();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c74(s2, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c71); }
    }

    return s0;
  }

  function peg$parseEventHandlers() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseEventHandler();
    if (s1 === peg$FAILED) {
      s1 = peg$parseEventHandlersChanined();
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c75(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseEventHandlersChanined() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c76;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c77); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parse_();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parse_();
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseEventHandler();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseEventHandlerWithPipe();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseEventHandlerWithPipe();
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parse_();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parse_();
            }
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s6 = peg$c78;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c79); }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c80(s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEventHandlerWithPipe() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 124) {
        s2 = peg$c68;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c69); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseEventHandler();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c81(s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEventHandler() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseStringSymbol();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEventAssignment();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseStringSymbol();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c82(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEventModifier() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s1 = peg$c84;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c85); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseIdentifier();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c86(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c83); }
    }

    return s0;
  }

  function peg$parseExpression() {
    var s0, s1;

    s0 = peg$parseObjectExpression();
    if (s0 === peg$FAILED) {
      s0 = [];
      s1 = peg$parseExpressionWithConnector();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseExpressionWithConnector();
      }
    }

    return s0;
  }

  function peg$parseObjectExpression() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c76;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c77); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseExpressionWithConnector();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseExpressionWithConnector();
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseObjectExpressionRest();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseObjectExpressionRest();
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s4 = peg$c78;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c79); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c87(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseObjectExpressionRest() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 44) {
      s1 = peg$c22;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c23); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseExpressionWithConnector();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseExpressionWithConnector();
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c88(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseExpressionWithConnector() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseSingleExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseConnector();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c89(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSingleExpression() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parse_();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parse_();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseExpWord();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parse_();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parse_();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseOperator();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parse_();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parse_();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseExpWord();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                s7 = [];
                s8 = peg$parse_();
                while (s8 !== peg$FAILED) {
                  s7.push(s8);
                  s8 = peg$parse_();
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c90(s2, s4, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseConnector() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c91.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c92); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c91.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c92); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c93(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseOperator() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c94.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c95); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c94.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c95); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c93(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseExpWord() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (peg$c97.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c98); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c97.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c98); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c60(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c96); }
    }

    return s0;
  }

  function peg$parseEventAssignment() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (peg$c100.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c101); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c100.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c101); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c60(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c99); }
    }

    return s0;
  }

  function peg$parseHtml() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (peg$c103.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c104); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c103.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c104); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c105(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c102); }
    }

    return s0;
  }

  function peg$parseStringSymbol() {
    var s0, s1;

    peg$silentFails++;
    if (peg$c107.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c108); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c106); }
    }

    return s0;
  }

  function peg$parseWord() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    if (peg$c110.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c111); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c110.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c111); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c60(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c109); }
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};


/***/ }),

/***/ "./src/add_ctx_to_expression.ts":
/*!**************************************!*\
  !*** ./src/add_ctx_to_expression.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addCtxToExpression": () => (/* binding */ addCtxToExpression)
/* harmony export */ });
/* harmony import */ var _constant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constant */ "./src/constant.ts");

function replaceWithContext(value) {
    return value.replace(_constant__WEBPACK_IMPORTED_MODULE_0__.jsKeywordRegex, _constant__WEBPACK_IMPORTED_MODULE_0__.contextString + ".$1");
}
function addCtxToExpression(expressions) {
    var keys = [];
    var str = "";
    var raw = "";
    function addCtxIfNotString(value) {
        if (_constant__WEBPACK_IMPORTED_MODULE_0__.stringRegex.test(value) === true) {
            str += value;
        }
        else {
            str += replaceWithContext(value);
            keys.push(value.trim());
        }
    }
    if (expressions != null) {
        expressions.forEach(function (expression) {
            addCtxIfNotString(expression.exp.left);
            raw += expression.exp.left;
            if (expression.exp.op != null) {
                str += expression.exp.op;
                raw += expression.exp.op;
                if (expression.exp.right != null) {
                    addCtxIfNotString(expression.exp.right);
                    raw += expression.exp.right;
                }
            }
            if (expression.op) {
                str += expression.op;
                raw += expression.op;
            }
        });
    }
    else {
        str = null;
    }
    return {
        expStr: str,
        keys: keys,
        // raw: raw === "" ? null : stringRegex.test(raw) === true ? raw : `'${raw}'`
        raw: raw === "" ? null : raw
    };
}


/***/ }),

/***/ "./src/constant.ts":
/*!*************************!*\
  !*** ./src/constant.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "stringRegex": () => (/* binding */ stringRegex),
/* harmony export */   "jsKeywordRegex": () => (/* binding */ jsKeywordRegex),
/* harmony export */   "contextString": () => (/* binding */ contextString)
/* harmony export */ });
// export const stringRegex = new RegExp(/["\']/g);
var stringRegex = new RegExp(/^[0-9]|["\']/);
// export const jsKeywordRegex = /\b(?!(?:false|true\b))([a-zA-Z]+)/g;
var jsKeywordRegex = /\b(?!(?:false|true\b))([a-zA-Z]+)/;
var contextString = "ctx";


/***/ }),

/***/ "./src/convert_array_to_comma_seperated_string.ts":
/*!********************************************************!*\
  !*** ./src/convert_array_to_comma_seperated_string.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "convertArrayToString": () => (/* binding */ convertArrayToString)
/* harmony export */ });
/* harmony import */ var _remove_comma_from_last__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./remove_comma_from_last */ "./src/remove_comma_from_last.ts");
/* harmony import */ var _constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constant */ "./src/constant.ts");


function convertArrayToString(value, shouldAddSingleQuote) {
    if (shouldAddSingleQuote === void 0) { shouldAddSingleQuote = true; }
    var result = "[";
    value.forEach(function (val) {
        result += (shouldAddSingleQuote === true ? (_constant__WEBPACK_IMPORTED_MODULE_1__.stringRegex.test(val) === true ? val : "'" + val + "'") :
            val) + ",";
    });
    result = (0,_remove_comma_from_last__WEBPACK_IMPORTED_MODULE_0__.removeCommaFromLast)(result);
    result += "]";
    return result;
}


/***/ }),

/***/ "./src/create_renderer.ts":
/*!********************************!*\
  !*** ./src/create_renderer.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createRenderer": () => (/* binding */ createRenderer)
/* harmony export */ });
/* harmony import */ var _parse_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse_view */ "./src/parse_view.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./src/utils/index.ts");
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./enums */ "./src/enums/index.ts");
/* harmony import */ var _constant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constant */ "./src/constant.ts");
/* harmony import */ var _unique__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./unique */ "./src/unique.ts");
/* harmony import */ var _add_ctx_to_expression__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./add_ctx_to_expression */ "./src/add_ctx_to_expression.ts");
/* harmony import */ var _remove_comma_from_last__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./remove_comma_from_last */ "./src/remove_comma_from_last.ts");
/* harmony import */ var _convert_array_to_comma_seperated_string__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./convert_array_to_comma_seperated_string */ "./src/convert_array_to_comma_seperated_string.ts");
var __spreadArrays = (undefined && undefined.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};








var beautify = __webpack_require__(/*! js-beautify */ "js-beautify");
function createRenderer(template) {
    var compiledParent = (0,_parse_view__WEBPACK_IMPORTED_MODULE_0__.parseview)(template);
    // console.log("compiled", compiledParent);
    if (compiledParent.view) {
        if (compiledParent.view.forExp) {
            console.error("Invalid template " + template);
            throw new _utils__WEBPACK_IMPORTED_MODULE_1__.LogHelper(_enums__WEBPACK_IMPORTED_MODULE_2__.ERROR_TYPE.ForExpAsRoot).get();
        }
    }
    var parentStr = "const " + _constant__WEBPACK_IMPORTED_MODULE_3__.contextString + "= this;";
    var createJsEqFromCompiled = function (compiled) {
        var str = "";
        if (compiled.view) {
            var handleTag_1 = function () {
                var tagHtml = "ce('" + compiled.view.tag + "',";
                if (compiled.child) {
                    var ifModifiedExpression_1;
                    var indexOfIfCond_1;
                    var indexToRemove_1 = [];
                    var isIfCondEndFound_1 = false;
                    var onIfCondEnd_1 = function (last) {
                        if (indexOfIfCond_1 == null) {
                            return;
                        }
                        isIfCondEndFound_1 = true;
                        compiled.child[indexOfIfCond_1].view.ifExpModified = ifModifiedExpression_1;
                        ifModifiedExpression_1 = null;
                        // console.log("if cond modified", indexOfIfCond, compiled.child[indexOfIfCond]);
                        for (var i = indexOfIfCond_1 + 1; i < last; i++) {
                            indexToRemove_1.push(i);
                        }
                        indexOfIfCond_1 = null;
                    };
                    compiled.child.forEach(function (child, index) {
                        if (!(child.view && child.view.ifExp)) {
                            return onIfCondEnd_1(index);
                        }
                        var ifExp = child.view.ifExp;
                        if (ifExp.ifCond) {
                            ifModifiedExpression_1 = {
                                ifExp: ifExp.ifCond,
                                ifElseList: []
                            };
                            indexOfIfCond_1 = index;
                        }
                        else if (ifExp.elseIfCond) {
                            ifModifiedExpression_1.ifElseList.push(child);
                        }
                        else if (ifExp.else) {
                            ifModifiedExpression_1.else = child;
                            onIfCondEnd_1(index + 1);
                        }
                        else {
                            onIfCondEnd_1(index);
                        }
                    });
                    // there was no end found and loop has ended
                    if (ifModifiedExpression_1 && isIfCondEndFound_1 === false) {
                        onIfCondEnd_1(compiled.child.length);
                    }
                    // console.log("indexOfIfCond", indexToRemove);
                    compiled.child = compiled.child.filter(function (child, index) {
                        return indexToRemove_1.indexOf(index) < 0;
                    });
                    var child = "[";
                    compiled.child.forEach(function (item, index) {
                        var childCompiled = createJsEqFromCompiled(item);
                        if (childCompiled && childCompiled.trim().length > 0) {
                            child += childCompiled + ",";
                        }
                    });
                    child = (0,_remove_comma_from_last__WEBPACK_IMPORTED_MODULE_6__.removeCommaFromLast)(child) + "]";
                    tagHtml += child;
                }
                else {
                    tagHtml += "[]";
                }
                return tagHtml;
            };
            var handleOption_1 = function () {
                var optionStr = ",{";
                // handle event
                var eventLength = compiled.view.events.length;
                if (eventLength > 0) {
                    var eventStr_1 = "";
                    // const identifierRegex = /([a-zA-Z]+)/g
                    // const identifierRegex = /\b(?!(?:false\b))([\w]+)/g
                    var identifierRegex_1 = /\b(?!(?:false|true\b))([a-zA-Z]+)/g;
                    compiled.view.events.forEach(function (ev, index) {
                        var handlerStr = "[";
                        ev.handlers.forEach(function (item) {
                            handlerStr += item.replace(identifierRegex_1, 'ctx.$1') + ",";
                        });
                        handlerStr = (0,_remove_comma_from_last__WEBPACK_IMPORTED_MODULE_6__.removeCommaFromLast)(handlerStr) + "]";
                        eventStr_1 += ev.name + ": {\n                            handlers: " + handlerStr + ",\n                            isNative: " + ev.isNative + ",\n                            option: " + JSON.stringify(ev.option) + ",\n                            modifiers: " + (0,_convert_array_to_comma_seperated_string__WEBPACK_IMPORTED_MODULE_7__.convertArrayToString)(ev.modifiers) + "\n                        }";
                        if (index + 1 < eventLength) {
                            eventStr_1 += ",";
                        }
                    });
                    optionStr += "on:{" + eventStr_1 + "}";
                }
                if (compiled.view.dir) {
                    optionStr += (optionStr.length > 2 ? "," : '') + " dir:{";
                    var _loop_1 = function (dirName) {
                        // optionStr += `${dirName}:{ `
                        var dirBinding = {
                            value: [],
                            props: [],
                            params: []
                        };
                        compiled.view.dir[dirName].forEach(function (dirValue) {
                            var expressionEvaluation = (0,_add_ctx_to_expression__WEBPACK_IMPORTED_MODULE_5__.addCtxToExpression)(dirValue);
                            dirBinding.value.push(expressionEvaluation.expStr);
                            dirBinding.props = __spreadArrays(dirBinding.props, expressionEvaluation.keys);
                            dirBinding.params.push(expressionEvaluation.raw);
                        });
                        optionStr += dirName + ":{ \n                                value:()=>{return " + (dirBinding.value.length > 1 ? (0,_convert_array_to_comma_seperated_string__WEBPACK_IMPORTED_MODULE_7__.convertArrayToString)(dirBinding.value, false) : dirBinding.value) + " },\n                                props:" + (0,_convert_array_to_comma_seperated_string__WEBPACK_IMPORTED_MODULE_7__.convertArrayToString)(dirBinding.props) + ",\n                                params: " + (0,_convert_array_to_comma_seperated_string__WEBPACK_IMPORTED_MODULE_7__.convertArrayToString)(dirBinding.value, false) + "\n                              },\n                            ";
                    };
                    for (var dirName in compiled.view.dir) {
                        _loop_1(dirName);
                    }
                    optionStr = (0,_remove_comma_from_last__WEBPACK_IMPORTED_MODULE_6__.removeCommaFromLast)(optionStr) + "}";
                    // optionStr += "}"
                }
                if (compiled.view.html) {
                    optionStr += (optionStr.length > 2 ? "," : '') + " html:ctx." + compiled.view.html;
                }
                // handle attributes
                var attr = compiled.view.attr;
                var attrLength = attr.length;
                if (attrLength > 0) {
                    var attrString_1 = '';
                    attr.forEach(function (item, index) {
                        if (item.isBind) {
                            attrString_1 += item.key + ":{v:ctx." + item.value + ",k:'" + item.value + "'}";
                        }
                        else {
                            attrString_1 += item.key + ":{v:'" + item.value + "'}";
                        }
                        if (index + 1 < attrLength) {
                            attrString_1 += ",";
                        }
                    });
                    optionStr += (optionStr.length > 2 ? "," : '') + " attr:{" + attrString_1 + "}";
                }
                optionStr += "})";
                return optionStr;
            };
            var handleFor = function (value) {
                var forExp = compiled.view.forExp;
                var keys = (0,_add_ctx_to_expression__WEBPACK_IMPORTED_MODULE_5__.addCtxToExpression)(forExp.value).keys;
                var getRegex = function (subStr) {
                    return new RegExp(subStr, 'g');
                };
                return "...hForE('" + keys[0] + "',(" + forExp.key + "," + forExp.index + ")=>{\n                            return " + value.replace(getRegex("ctx." + forExp.key), forExp.key).
                    replace(getRegex("ctx." + forExp.index), forExp.index) + "\n                        }," + (0,_unique__WEBPACK_IMPORTED_MODULE_4__.unique)() + ")\n                ";
                //return forStr;
            };
            var ifModified_1 = compiled.view.ifExpModified;
            if (ifModified_1 && ifModified_1.ifExp) {
                var allKeys_1 = [];
                (function () {
                    var _a = (0,_add_ctx_to_expression__WEBPACK_IMPORTED_MODULE_5__.addCtxToExpression)(ifModified_1.ifExp), expStr = _a.expStr, keys = _a.keys;
                    allKeys_1 = allKeys_1.concat(keys);
                    str += "he(()=>{return " + expStr + " ? " + (handleTag_1() + handleOption_1());
                })();
                ifModified_1.ifElseList.forEach(function (item) {
                    var _a = (0,_add_ctx_to_expression__WEBPACK_IMPORTED_MODULE_5__.addCtxToExpression)(item.view.ifExp.elseIfCond), expStr = _a.expStr, keys = _a.keys;
                    allKeys_1 = allKeys_1.concat(keys);
                    str += ":" + expStr + " ? " + createJsEqFromCompiled(item) + " ";
                });
                var keysAsString = (0,_convert_array_to_comma_seperated_string__WEBPACK_IMPORTED_MODULE_7__.convertArrayToString)(Array.from(new Set(allKeys_1)));
                var elseString = void 0;
                if (ifModified_1.else) {
                    elseString = createJsEqFromCompiled(ifModified_1.else);
                }
                else {
                    elseString = "ce()";
                }
                str += ":" + elseString + " }," + keysAsString + "," + (0,_unique__WEBPACK_IMPORTED_MODULE_4__.unique)() + ")";
            }
            else {
                if (compiled.view.forExp) {
                    str += handleFor(handleTag_1() + handleOption_1());
                }
                else {
                    str += handleTag_1() + handleOption_1();
                }
            }
        }
        else if (compiled.mustacheExp) {
            var method_1 = "()=>{return ct(";
            var brackets_1 = "";
            compiled.filters.forEach(function (item) {
                method_1 += "f('" + item + "',";
                brackets_1 += ")";
            });
            var _a = (0,_add_ctx_to_expression__WEBPACK_IMPORTED_MODULE_5__.addCtxToExpression)([{
                    op: null,
                    exp: {
                        left: compiled.mustacheExp,
                        op: null,
                        right: null
                    }
                }]), keys = _a.keys, expStr = _a.expStr;
            method_1 += expStr + " " + brackets_1 + " )}";
            str += "he(" + method_1 + ", " + (0,_convert_array_to_comma_seperated_string__WEBPACK_IMPORTED_MODULE_7__.convertArrayToString)(keys) + "," + (0,_unique__WEBPACK_IMPORTED_MODULE_4__.unique)() + ")";
        }
        else if (compiled.trim().length > 0) {
            str += "ct('" + compiled + "')";
        }
        return str;
    };
    parentStr += "return " + createJsEqFromCompiled(compiledParent);
    parentStr = beautify(parentStr, { indent_size: 4, space_in_empty_paren: true });
    console.log("parentstr", parentStr);
    return new Function('ce', 'ct', 'f', 'he', 'hForE', parentStr);
}


/***/ }),

/***/ "./src/enums/error_type.ts":
/*!*********************************!*\
  !*** ./src/enums/error_type.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ERROR_TYPE": () => (/* binding */ ERROR_TYPE)
/* harmony export */ });
var ERROR_TYPE;
(function (ERROR_TYPE) {
    ERROR_TYPE["InvalidComponent"] = "invalid_component";
    ERROR_TYPE["SynTaxError"] = "syntax_error";
    ERROR_TYPE["ForExpAsRoot"] = "for_exp_as_root";
    ERROR_TYPE["ForOnPrimitiveOrNull"] = "for_on_primitive|null";
    ERROR_TYPE["InvalidEventHandler"] = "invalid_event_handler";
    ERROR_TYPE["InvalidFilter"] = "invalid_filter";
})(ERROR_TYPE || (ERROR_TYPE = {}));


/***/ }),

/***/ "./src/enums/html_tag.ts":
/*!*******************************!*\
  !*** ./src/enums/html_tag.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HTML_TAG": () => (/* binding */ HTML_TAG)
/* harmony export */ });
var HTML_TAG;
(function (HTML_TAG) {
    HTML_TAG[HTML_TAG["div"] = 1] = "div";
    HTML_TAG[HTML_TAG["p"] = 1] = "p";
    HTML_TAG[HTML_TAG["b"] = 1] = "b";
    HTML_TAG[HTML_TAG["span"] = 1] = "span";
    HTML_TAG[HTML_TAG["input"] = 1] = "input";
    HTML_TAG[HTML_TAG["u"] = 1] = "u";
    HTML_TAG[HTML_TAG["button"] = 1] = "button";
    HTML_TAG[HTML_TAG["table"] = 1] = "table";
    HTML_TAG[HTML_TAG["tr"] = 1] = "tr";
    HTML_TAG[HTML_TAG["td"] = 1] = "td";
    HTML_TAG[HTML_TAG["thead"] = 1] = "thead";
    HTML_TAG[HTML_TAG["tbody"] = 1] = "tbody";
    HTML_TAG[HTML_TAG["tfoot"] = 1] = "tfoot";
    HTML_TAG[HTML_TAG["strong"] = 1] = "strong";
})(HTML_TAG || (HTML_TAG = {}));


/***/ }),

/***/ "./src/enums/index.ts":
/*!****************************!*\
  !*** ./src/enums/index.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ERROR_TYPE": () => (/* reexport safe */ _error_type__WEBPACK_IMPORTED_MODULE_0__.ERROR_TYPE),
/* harmony export */   "HTML_TAG": () => (/* reexport safe */ _html_tag__WEBPACK_IMPORTED_MODULE_1__.HTML_TAG),
/* harmony export */   "LIFECYCLE_EVENT": () => (/* reexport safe */ _life_cycle_event__WEBPACK_IMPORTED_MODULE_2__.LIFECYCLE_EVENT)
/* harmony export */ });
/* harmony import */ var _error_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error_type */ "./src/enums/error_type.ts");
/* harmony import */ var _html_tag__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./html_tag */ "./src/enums/html_tag.ts");
/* harmony import */ var _life_cycle_event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./life_cycle_event */ "./src/enums/life_cycle_event.ts");





/***/ }),

/***/ "./src/enums/life_cycle_event.ts":
/*!***************************************!*\
  !*** ./src/enums/life_cycle_event.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LIFECYCLE_EVENT": () => (/* binding */ LIFECYCLE_EVENT)
/* harmony export */ });
var LIFECYCLE_EVENT;
(function (LIFECYCLE_EVENT) {
    LIFECYCLE_EVENT["Rendered"] = "rendered";
    LIFECYCLE_EVENT["Created"] = "created";
    LIFECYCLE_EVENT["Destroyed"] = "destroyed";
})(LIFECYCLE_EVENT || (LIFECYCLE_EVENT = {}));


/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createRenderer": () => (/* reexport safe */ _create_renderer__WEBPACK_IMPORTED_MODULE_0__.createRenderer)
/* harmony export */ });
/* harmony import */ var _create_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./create_renderer */ "./src/create_renderer.ts");



/***/ }),

/***/ "./src/parse_view.ts":
/*!***************************!*\
  !*** ./src/parse_view.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parseview": () => (/* binding */ parseview)
/* harmony export */ });
/* harmony import */ var _build_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../build/parser */ "./build/parser.js");
/* harmony import */ var _build_parser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_build_parser__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./enums */ "./src/enums/index.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ "./src/utils/index.ts");



function parseview(viewCode) {
    try {
        // viewCode = viewCode.replace(new RegExp('\n', 'g'), '').trim();
        viewCode = viewCode.trim();
        return _build_parser__WEBPACK_IMPORTED_MODULE_0__.parse(viewCode);
    }
    catch (ex) {
        var location_1 = ex.location;
        var css = "background: #222; color: #bada55";
        var lines = viewCode.split("\n");
        // console.log(`%c${viewCode.substring(0, location.start.offset)}%c${viewCode.substring(location.start.offset, location.end.offset + 1)}%c${viewCode.substring(location.end.offset + 1)}`,
        //     css, css + ';color:red', css);
        // do not remove this
        console.log("%c" + lines.slice(0, location_1.start.line - 1).join("\n") +
            "%c" + lines.slice(location_1.start.line - 1, location_1.end.line).join("\n") +
            "%c" + lines.slice(location_1.end.line).join("\n"), css, css + ';color:#ff0000', css);
        var err = new _utils__WEBPACK_IMPORTED_MODULE_2__.LogHelper(_enums__WEBPACK_IMPORTED_MODULE_1__.ERROR_TYPE.SynTaxError, ex.message).getPlain();
        throw err;
    }
}


/***/ }),

/***/ "./src/remove_comma_from_last.ts":
/*!***************************************!*\
  !*** ./src/remove_comma_from_last.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "removeCommaFromLast": () => (/* binding */ removeCommaFromLast)
/* harmony export */ });
function removeCommaFromLast(value) {
    value = value.trim();
    if (value[value.length - 1] === ",") {
        value = value.substr(0, value.length - 1);
    }
    return value;
}


/***/ }),

/***/ "./src/unique.ts":
/*!***********************!*\
  !*** ./src/unique.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unique": () => (/* binding */ unique)
/* harmony export */ });
var uniqueCount = 0;
var unique = function () {
    return ++uniqueCount;
};


/***/ }),

/***/ "./src/utils/for_own.ts":
/*!******************************!*\
  !*** ./src/utils/for_own.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "forOwn": () => (/* binding */ forOwn)
/* harmony export */ });
function forOwn(obj, cb) {
    for (var key in obj) {
        if (obj.hasOwnProperty(key)) {
            cb(key, obj[key]);
        }
    }
}
;


/***/ }),

/***/ "./src/utils/get_from_window.ts":
/*!**************************************!*\
  !*** ./src/utils/get_from_window.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getFromWindow": () => (/* binding */ getFromWindow)
/* harmony export */ });
var getFromWindow = function (prop) {
    return window[prop];
};


/***/ }),

/***/ "./src/utils/get_object_length.ts":
/*!****************************************!*\
  !*** ./src/utils/get_object_length.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getObjectLength": () => (/* binding */ getObjectLength)
/* harmony export */ });
function getObjectLength(value) {
    return value.length || Object.keys(value).length;
}


/***/ }),

/***/ "./src/utils/index.ts":
/*!****************************!*\
  !*** ./src/utils/index.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isPrimitive": () => (/* reexport safe */ _is_primitive__WEBPACK_IMPORTED_MODULE_0__.isPrimitive),
/* harmony export */   "isNull": () => (/* reexport safe */ _is_null__WEBPACK_IMPORTED_MODULE_1__.isNull),
/* harmony export */   "LogHelper": () => (/* reexport safe */ _log_helper__WEBPACK_IMPORTED_MODULE_2__.LogHelper),
/* harmony export */   "isArray": () => (/* reexport safe */ _is_array__WEBPACK_IMPORTED_MODULE_3__.isArray),
/* harmony export */   "isArrayIndex": () => (/* reexport safe */ _is_array_index__WEBPACK_IMPORTED_MODULE_4__.isArrayIndex),
/* harmony export */   "isObject": () => (/* reexport safe */ _is_object__WEBPACK_IMPORTED_MODULE_5__.isObject),
/* harmony export */   "isString": () => (/* reexport safe */ _is_string__WEBPACK_IMPORTED_MODULE_6__.isString),
/* harmony export */   "getFromWindow": () => (/* reexport safe */ _get_from_window__WEBPACK_IMPORTED_MODULE_7__.getFromWindow),
/* harmony export */   "getObjectLength": () => (/* reexport safe */ _get_object_length__WEBPACK_IMPORTED_MODULE_8__.getObjectLength),
/* harmony export */   "indexOf": () => (/* reexport safe */ _index_of__WEBPACK_IMPORTED_MODULE_9__.indexOf),
/* harmony export */   "merge": () => (/* reexport safe */ _merge__WEBPACK_IMPORTED_MODULE_10__.merge),
/* harmony export */   "setAttribute": () => (/* reexport safe */ _set_attribute__WEBPACK_IMPORTED_MODULE_11__.setAttribute),
/* harmony export */   "forOwn": () => (/* reexport safe */ _for_own__WEBPACK_IMPORTED_MODULE_12__.forOwn),
/* harmony export */   "isTrue": () => (/* reexport safe */ _is_true__WEBPACK_IMPORTED_MODULE_13__.isTrue),
/* harmony export */   "isKeyExist": () => (/* reexport safe */ _is_key_exist__WEBPACK_IMPORTED_MODULE_14__.isKeyExist)
/* harmony export */ });
/* harmony import */ var _is_primitive__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./is_primitive */ "./src/utils/is_primitive.ts");
/* harmony import */ var _is_null__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./is_null */ "./src/utils/is_null.ts");
/* harmony import */ var _log_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./log_helper */ "./src/utils/log_helper.ts");
/* harmony import */ var _is_array__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./is_array */ "./src/utils/is_array.ts");
/* harmony import */ var _is_array_index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./is_array_index */ "./src/utils/is_array_index.ts");
/* harmony import */ var _is_object__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./is_object */ "./src/utils/is_object.ts");
/* harmony import */ var _is_string__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./is_string */ "./src/utils/is_string.ts");
/* harmony import */ var _get_from_window__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./get_from_window */ "./src/utils/get_from_window.ts");
/* harmony import */ var _get_object_length__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./get_object_length */ "./src/utils/get_object_length.ts");
/* harmony import */ var _index_of__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./index_of */ "./src/utils/index_of.ts");
/* harmony import */ var _merge__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./merge */ "./src/utils/merge.ts");
/* harmony import */ var _set_attribute__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./set_attribute */ "./src/utils/set_attribute.ts");
/* harmony import */ var _for_own__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./for_own */ "./src/utils/for_own.ts");
/* harmony import */ var _is_true__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./is_true */ "./src/utils/is_true.ts");
/* harmony import */ var _is_key_exist__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./is_key_exist */ "./src/utils/is_key_exist.ts");

















/***/ }),

/***/ "./src/utils/index_of.ts":
/*!*******************************!*\
  !*** ./src/utils/index_of.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "indexOf": () => (/* binding */ indexOf)
/* harmony export */ });
function indexOf(value, key) {
    var index = -1;
    for (var item in value) {
        ++index;
        if (item === key) {
            return index;
        }
    }
    return -1;
}


/***/ }),

/***/ "./src/utils/is_array.ts":
/*!*******************************!*\
  !*** ./src/utils/is_array.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isArray": () => (/* binding */ isArray)
/* harmony export */ });
function isArray(value) {
    return Array.isArray(value);
}


/***/ }),

/***/ "./src/utils/is_array_index.ts":
/*!*************************************!*\
  !*** ./src/utils/is_array_index.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isArrayIndex": () => (/* binding */ isArrayIndex)
/* harmony export */ });
function isArrayIndex(value) {
    return value === parseInt(value, 10);
}


/***/ }),

/***/ "./src/utils/is_key_exist.ts":
/*!***********************************!*\
  !*** ./src/utils/is_key_exist.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isKeyExist": () => (/* binding */ isKeyExist)
/* harmony export */ });
function isKeyExist(obj, key) {
    return obj[key] != null;
}


/***/ }),

/***/ "./src/utils/is_null.ts":
/*!******************************!*\
  !*** ./src/utils/is_null.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isNull": () => (/* binding */ isNull)
/* harmony export */ });
function isNull(value) {
    return value == null;
}


/***/ }),

/***/ "./src/utils/is_object.ts":
/*!********************************!*\
  !*** ./src/utils/is_object.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isObject": () => (/* binding */ isObject)
/* harmony export */ });
function isObject(value) {
    return typeof value === "object";
}


/***/ }),

/***/ "./src/utils/is_primitive.ts":
/*!***********************************!*\
  !*** ./src/utils/is_primitive.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isPrimitive": () => (/* binding */ isPrimitive)
/* harmony export */ });
function isPrimitive(value) {
    switch (typeof value) {
        case 'undefined':
        case 'object':
            return false;
    }
    return true;
}


/***/ }),

/***/ "./src/utils/is_string.ts":
/*!********************************!*\
  !*** ./src/utils/is_string.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isString": () => (/* binding */ isString)
/* harmony export */ });
function isString(value) {
    return typeof value === "string";
}


/***/ }),

/***/ "./src/utils/is_true.ts":
/*!******************************!*\
  !*** ./src/utils/is_true.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isTrue": () => (/* binding */ isTrue)
/* harmony export */ });
function isTrue(value) {
    value === true;
}


/***/ }),

/***/ "./src/utils/log_helper.ts":
/*!*********************************!*\
  !*** ./src/utils/log_helper.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LogHelper": () => (/* binding */ LogHelper)
/* harmony export */ });
/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../enums */ "./src/enums/index.ts");
var __spreadArrays = (undefined && undefined.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

var LogHelper = /** @class */ (function () {
    function LogHelper(type, info) {
        this.type = type;
        this.info_ = info;
        this.message = this.getMsg_();
    }
    LogHelper.prototype.logError = function () {
        console.error("{Taj error}:", this.get());
    };
    LogHelper.prototype.logPlainError = function () {
        console.error("{Taj error}:", this.getPlain());
    };
    LogHelper.prototype.logWarning = function () {
        console.warn("{Taj warn}:", this.get());
    };
    LogHelper.prototype.get = function () {
        return {
            message: this.message,
            type: this.type
        };
    };
    LogHelper.prototype.getPlain = function () {
        var err = this.get();
        return " " + err.message + "\n\n        type : " + err.type + "\n        ";
    };
    LogHelper.prototype.getMsg_ = function () {
        var errMsg;
        switch (this.type) {
            case _enums__WEBPACK_IMPORTED_MODULE_0__.ERROR_TYPE.SynTaxError:
                errMsg = this.info_;
                break;
            case _enums__WEBPACK_IMPORTED_MODULE_0__.ERROR_TYPE.ForExpAsRoot:
                errMsg = "For is not allowed in root element. Create a child element instead.";
                break;
            case _enums__WEBPACK_IMPORTED_MODULE_0__.ERROR_TYPE.ForOnPrimitiveOrNull:
                errMsg = "For expression can not be run on null or primitive datatype. Initiate variable " + this.info_ + " as array or object.";
                break;
            case _enums__WEBPACK_IMPORTED_MODULE_0__.ERROR_TYPE.InvalidEventHandler:
                errMsg = "Invalid event handler for event \"" + this.info_.eventName + "\", Handler does not exist in component.";
                break;
            case _enums__WEBPACK_IMPORTED_MODULE_0__.ERROR_TYPE.InvalidComponent:
                errMsg = "Component \"" + this.info_.tag + "\" is not registered. Make sure you have registered component either in parent component or globally.";
                break;
            case _enums__WEBPACK_IMPORTED_MODULE_0__.ERROR_TYPE.InvalidFilter:
                errMsg = "Can not find Filter \"" + this.info_.filter + "\". Make sure you have registered filter either in component or globally.";
                break;
            default:
                errMsg = this.message;
                break;
        }
        return errMsg;
    };
    LogHelper.warn = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        console.warn.apply(console, __spreadArrays(["{Taj warn}:"], args));
    };
    LogHelper.prototype.throwPlain = function () {
        throw "{Taj throw}:" + this.getPlain();
    };
    return LogHelper;
}());



/***/ }),

/***/ "./src/utils/merge.ts":
/*!****************************!*\
  !*** ./src/utils/merge.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "merge": () => (/* binding */ merge)
/* harmony export */ });
var merge = function (obj1, obj2) {
    obj1 = Object.assign({}, obj1);
    return Object.assign(obj1, obj2);
};


/***/ }),

/***/ "./src/utils/set_attribute.ts":
/*!************************************!*\
  !*** ./src/utils/set_attribute.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setAttribute": () => (/* binding */ setAttribute)
/* harmony export */ });
function setAttribute(element, key, value) {
    if (element.nodeType === 1 && key === "value") {
        return element.value = value;
    }
    return element.setAttribute(key, value);
}


/***/ }),

/***/ "js-beautify":
/*!******************************!*\
  !*** external "js-beautify" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("js-beautify");;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// module exports must be returned from runtime so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__("./src/index.ts");
/******/ })()
;
//# sourceMappingURL=template_compiler.js.map